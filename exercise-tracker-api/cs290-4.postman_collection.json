{
	"info": {
		"_postman_id": "629e294a-30d7-4429-bbf3-239ca6bf085a",
		"name": "cs290-4",
		"description": "# CS290 Assignment 4\n\n⚠️⚠️⚠️ The requests in this collection assumes the `date` property uses the `Date` datatype. If you are using `String`, you may need to modify the tests a little.\n\n\n## Configuration\nBy default, 10 data sets will be posted by the test runner.\n\nThis can be configured by the `maxCount` collection variable.\n\nThis only takes effect when using requests using the runner.\n\nAlternatively, you can try to change the iteration count in the runner.\n\n## Run tests\nUse the test runner to run all requests in the order they are defined.\n\n## Populate data only\nOnly run `Initialize` and `Post random data`\n\n## Delete everything\nOnly run `Get all` and `Delete all`\n\n### Note\n\nThe tests defined in this collection assumes that IDs are valid, as stated in the assignment instruction. You'll need to add more requests and tests if you want to test cases involving invalid request bodies or invalid IDs.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Initialize",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"count\", 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "localhost:3000/exercises",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post random data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const units = pm.collectionVariables.get(\"units\");\r",
							"\r",
							"// set random unit\r",
							"pm.collectionVariables.set(\"unit\", units[_.random(units.length -1)]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const schema = pm.collectionVariables.get(\"schema\");\r",
							"\r",
							"const res = jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response matches schema\", () => {\r",
							"    pm.expect(tv4.validate(res, schema)).to.be.true\r",
							"});\r",
							"\r",
							"// loop this request a number of times\r",
							"const count = parseInt(pm.collectionVariables.get(\"count\"))\r",
							"const maxCount = parseInt(pm.collectionVariables.get(\"maxCount\"))\r",
							"\r",
							"if (count < maxCount){\r",
							"    pm.collectionVariables.set(\"count\", count + 1);\r",
							"    postman.setNextRequest(pm.info.requestName);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{$randomFullName}}"
						},
						{
							"key": "date",
							"value": "{{$isoTimestamp}}",
							"description": "This assumes a Date datatype for the date property.",
							"type": "text"
						},
						{
							"key": "date",
							"value": "06-26-21",
							"description": "Use this if using a String datatype",
							"type": "text",
							"disabled": true
						},
						{
							"key": "unit",
							"value": "{{unit}}",
							"type": "text"
						},
						{
							"key": "reps",
							"value": "{{$randomInt}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{$randomInt}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/exercises",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = pm.collectionVariables.get(\"schema\");\r",
							"\r",
							"const res = jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(Array.isArray(res)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response matches schema\", () => {\r",
							"    res.forEach((item) => {\r",
							"        pm.expect(tv4.validate(item, schema)).to.be.true\r",
							"    })\r",
							"});\r",
							"\r",
							"// save ids to variable\r",
							"pm.collectionVariables.set(\"ids\", res.map(item => item._id));\r",
							"// reset count\r",
							"pm.collectionVariables.set(\"count\", 1);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/exercises",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = pm.collectionVariables.get(\"schema\");\r",
							"\r",
							"const res = jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response matches schema\", () => {\r",
							"    pm.expect(tv4.validate(res, schema)).to.be.true\r",
							"});\r",
							"\r",
							"// import lodash\r",
							"const lodash = require('lodash')\r",
							"\r",
							"const req = JSON.parse(pm.collectionVariables.get(\"req\"))\r",
							"const omittedRes = lodash.mapValues(lodash.omit(res, ['_id', '__v']), (val) => val.toString())\r",
							"\r",
							"pm.test(\"Updated document matches request body\", () => {\r",
							"    pm.expect(lodash.isEqual(req, omittedRes)).to.be.true\r",
							"})\r",
							"\r",
							"// loop this request a number of times\r",
							"const count = parseInt(pm.collectionVariables.get(\"count\"))\r",
							"const maxCount = parseInt(pm.collectionVariables.get(\"maxCount\"))\r",
							"\r",
							"if (count < maxCount){\r",
							"    pm.collectionVariables.set(\"count\", count + 1);\r",
							"    postman.setNextRequest(pm.info.requestName);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const units = pm.collectionVariables.get(\"units\");\r",
							"\r",
							"const unit = units[_.random(units.length -1)]\r",
							"\r",
							"// set the request body\r",
							"const req = {\r",
							"    name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
							"    // comment out the next line if using String for date\r",
							"    date: pm.variables.replaceIn('{{$isoTimestamp}}'),\r",
							"    unit: unit,\r",
							"    reps: pm.variables.replaceIn('{{$randomInt}}'),\r",
							"    weight: pm.variables.replaceIn('{{$randomInt}}')\r",
							"}\r",
							"\r",
							"pm.collectionVariables.set(\"req\", JSON.stringify(req));\r",
							"\r",
							"// set the request id\r",
							"const ids = pm.collectionVariables.get(\"ids\")\r",
							"const count = pm.collectionVariables.get(\"count\")\r",
							"\r",
							"// throw if no id found\r",
							"if (!ids || ids.length === 0) {\r",
							"    pm.collectionVariables.set(\"id\", '');\r",
							"    throw new Error(\"No IDs found. Make sure to run 'Get all' before this\");\r",
							"}\r",
							"\r",
							"// get the first id and set it as the current id\r",
							"const id = pm.collectionVariables.get(\"ids\")[count - 1];\r",
							"\r",
							"pm.collectionVariables.set(\"id\", id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/exercises/{{id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"exercises",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// assumes delete is valid\r",
							"pm.test(\"Status code is 204\", () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"// check if any more ids left\r",
							"const ids = pm.collectionVariables.get(\"ids\")\r",
							"\r",
							"if (!ids || ids.length === 0) {\r",
							"    return\r",
							"}\r",
							"\r",
							"postman.setNextRequest(pm.info.requestName)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const ids = pm.collectionVariables.get(\"ids\")\r",
							"\r",
							"// throw if no id found\r",
							"if (!ids || ids.length === 0) {\r",
							"    pm.collectionVariables.set(\"id\", '');\r",
							"    throw new Error(\"No IDs found. Make sure to run 'Get all' before this\");\r",
							"}\r",
							"\r",
							"// get the first id and set it as the current id\r",
							"const [firstId, ...rest] = pm.collectionVariables.get(\"ids\");\r",
							"\r",
							"pm.collectionVariables.set(\"id\", firstId);\r",
							"pm.collectionVariables.set(\"ids\", rest);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/exercises/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"exercises",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const schema = {",
					"    type: 'object',",
					"    properties: {",
					"        _id: {",
					"            type: 'string',",
					"            pattern: '^[a-f\\\\d]{24}$',",
					"        },",
					"        name: {",
					"            type: 'string',",
					"        },",
					"        date: {",
					"            type: 'string',",
					"        },",
					"        unit: {",
					"            type: 'string',",
					"            enum: ['kgs', 'lbs'],",
					"        },",
					"        reps: {",
					"            type: 'integer',",
					"        },",
					"        weight: {",
					"            type: 'integer',",
					"        },",
					"    },",
					"    required: ['_id', 'name', 'date', 'unit', 'reps', 'weight'],",
					"}",
					"",
					"const units = ['kgs', 'lbs']",
					"",
					"// persisted",
					"pm.collectionVariables.set('schema', schema)",
					"pm.collectionVariables.set('units', units)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// all responses should have content-type:application/json, except delete",
					"if (pm.response.code !== 204) {",
					"    pm.test('Content-Type header is present', () => {",
					"        pm.response.to.have.header('Content-Type')",
					"    })",
					"",
					"    pm.test('Content-Type header is application/json', () => {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json')",
					"    })",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "maxCount",
			"value": "10"
		},
		{
			"key": "schema",
			"value": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string",
						"pattern": "^[a-f\\d]{24}$"
					},
					"name": {
						"type": "string"
					},
					"date": {
						"type": "string"
					},
					"unit": {
						"type": "string",
						"enum": [
							"kgs",
							"lbs"
						]
					},
					"reps": {
						"type": "integer"
					},
					"weight": {
						"type": "integer"
					}
				},
				"required": [
					"_id",
					"name",
					"date",
					"unit",
					"reps",
					"weight"
				]
			}
		},
		{
			"key": "units",
			"value": [
				"kgs",
				"lbs"
			]
		},
		{
			"key": "unit",
			"value": "lbs"
		},
		{
			"key": "ids",
			"value": []
		},
		{
			"key": "id",
			"value": "610a148d2e9ec23f3c80b002"
		},
		{
			"key": "count",
			"value": "0"
		},
		{
			"key": "req",
			"value": ""
		}
	]
}